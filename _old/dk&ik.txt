BASE = hou.node('/obj/KR10_R1420/0_BASE')
ROTATING_COLUMN = hou.node('obj/KR10_R1420/1_ROTATING_COLUMN/')
LINK_ARM = hou.node('obj/KR10_R1420/2_LINK_ARM/')
IN_LINE_WRIST = hou.node('obj/KR10_R1420/3_IN-LINE_WRIST/')
WRIST1 = hou.node('obj/KR10_R1420/4_WRIST1/')
FLANGE = hou.node('/obj/KR10_R1420/FLANGE/')

ABW_hou = BASE.worldTransform().transposed().asTupleOfTuples()
ABW = np.asarray(ABW_hou)
ABW[np.absolute(ABW)<=0.0001]=0

#TBLW_hou = BLADE.worldTransform().transposed().asTupleOfTuples()
#TBLW = np.asarray(TBLW_hou)
#TBLW[np.absolute(TBLW)<=0.0001]=0

#TSW_hou = LVDT.worldTransform().transposed().asTupleOfTuples()
#TSW = np.asarray(TSW_hou)
#TSW[np.absolute(TSW)<=0.0001]=0

#TBS = np.dot(np.linalg.inv(TSW),TBLW)

X = hou.parm('/obj/KR10_R1420/X')
Y = hou.parm('/obj/KR10_R1420/Y')
Z = hou.parm('/obj/KR10_R1420/Z')
A = hou.parm('obj/KR10_R1420/A')
B = hou.parm('obj/KR10_R1420/B')
C = hou.parm('obj/KR10_R1420/C')

H1 = hou.parmTuple('obj/KR10_R1420/H1')
H2 = hou.parmTuple('obj/KR10_R1420/H2')
H3 = hou.parmTuple('obj/KR10_R1420/H3')
H4 = hou.parmTuple('obj/KR10_R1420/H4')

q1 = hou.parm('/obj/KR10_R1420/q1')
q2 = hou.parm('/obj/KR10_R1420/q2')
q3 = hou.parm('/obj/KR10_R1420/q3')
q4 = hou.parm('/obj/KR10_R1420/q4')
q5 = hou.parm('/obj/KR10_R1420/q5')
q6 = hou.parm('/obj/KR10_R1420/q6')

lbl_shoulder = hou.parm('/obj/KR10_R1420/lbl_shoulder')
lbl_elbow = hou.parm('/obj/KR10_R1420/lbl_elbow')

elbow_dic = {'UP': -1.0, 'DOWN': 1.0}
shoulder_dic = {'UP': -1.0, 'DOWN': 1.0}


# Denavit–Hartenberg parameters

d = np.array([223.0, -101.5, 101.5, -660.0, 0.0, -80])
a = np.array ([150.0, -610.0, -20.0, 0.0, 0.0, 0.0])
alpha = np.array ([pi/2, 0, -pi/2, pi/2, -pi/2, pi])   


def dk():
    
    A6W_hou = FLANGE.worldTransform().transposed().asTupleOfTuples()
    A6W = np.asarray(A6W_hou)
    A6W[np.absolute(A6W)<=0.0001]=0
    
    A6B = np.dot(np.linalg.inv(ABW),A6W)    
    A6B[np.absolute(A6B)<=0.0001]=0
       
    H1.set(A6B[0,0:4])
    H2.set(A6B[1,0:4])
    H3.set(A6B[2,0:4])
    H4.set(A6B[3,0:4])
     
    X.set(A6B[0,3])
    Y.set(A6B[1,3])
    Z.set(A6B[2,3])
    
    #theta - pitch
    pitch = np.arctan2(-A6B[2,0],np.sqrt(A6B[2,1]**2+A6B[2,2]**2)) 
    
    #phi - roll
#    if ((pitch == pi/2) or (pitch == -pi/2)):
#        roll = 0
#    else:
    roll = np.arctan2(A6B[1,0]/np.cos(pitch),A6B[0,0]/np.cos(pitch))
        
    #psi - yaw
#    if (pitch == pi/2):
    yaw = np.arctan2(A6B[2,1]/np.cos(pitch),A6B[2,2]/np.cos(pitch))
        
    A.set(roll*180.0/pi)
    B.set(pitch*180.0/pi) 
    C.set(yaw*180.0/pi) 
    
    if (q2.eval() > 0.):
        lbl_shoulder.set('DOWN')
    else:
        lbl_shoulder.set('UP')
                                  
    if (q3.eval() >= 1.735):
        lbl_elbow.set('DOWN')
    else:
        lbl_elbow.set('UP')
        
def ik():

    o6B = np.array([X.eval(),Y.eval(),Z.eval(),1])
    R6B = euler(A.eval(),B.eval(),C.eval())    
    A6B = np.column_stack((np.row_stack((R6B,np.zeros(3))),o6B))
    A6B[abs(A6B)<=0.0001] = 0
    
#    A6W_hou = FLANGE.worldTransform().transposed().asTupleOfTuples()
#    A6W = np.asarray(A6W_hou)
#    A6W[np.absolute(A6W)<=0.0001]=0
#    
#    A6B = np.dot(np.linalg.inv(ABW),A6W)

    H1.set(A6B[0,0:4])
    H2.set(A6B[1,0:4])
    H3.set(A6B[2,0:4])
         
# INVERSE POSITION #
            
    # choose configuration    
    if (lbl_shoulder.eval() == 'DOWN'):
        shoulder = 1.0
    else:
        shoulder = -1.0
        
    if (lbl_elbow.eval() == 'DOWN'):
        elbow = 1.0
    else:
        elbow = -1.0
            
    # joint №1 #
    
    o6B = A6B[0:3,3]   
    o4B = o6B - abs(d[5])*A6B[0:3,2]

    q1_value = np.arctan2(o4B[1],o4B[0])*180.0/pi
    
    # joint №2 #
    phi = np.arctan(abs(d[3])/abs(a[2]))*180.0/pi
    l = np.hypot(abs(d[3]),abs(a[2])) 
    
    A0B_hou = ROTATING_COLUMN.localTransform().transposed().asTupleOfTuples()
    A0B = np.asarray(A0B_hou)
    A0B[np.absolute(A0B)<=0.0001]=0
    
    A60 = np.dot(np.linalg.inv(A0B),A6B)
    A60[np.absolute(A60)<=0.0001]=0
    
    A10_hou = LINK_ARM.localTransform().transposed().asTupleOfTuples()
    A10 = np.asarray(A10_hou)
    A10[np.absolute(A10)<=0.0001]=0
            
    o60 = A60[0:3,3]    
    o40 = o60 - abs(d[5])*A60[0:3,2]    
    o10 = A10[0:3,3]
    o41 = o40 - o10
    o41m = np.hypot(o41[0],o41[2])
    
    gamma1 = np.arctan2(o41[2],o41[0])*180.0/pi
    gamma2 = np.arccos((abs(a[1])**2+o41m**2-l**2)/(2*abs(a[1])*o41m))*180.0/pi
    
    if ((shoulder == -1) and (elbow == 1) and (o41[2] < 0) and (o41[0] < 0)):
        q2_value = -gamma1 - gamma2 - 360.0
    elif ((shoulder == -1) and (elbow == -1) and (o41[2] < 0) and (o41[0] < 0)):
        q2_value = -gamma1 + gamma2 - 360.0
    else:
        q2_value = -gamma1 - elbow*gamma2 
       
    # joint №3 #      
    beta = np.arccos((abs(a[1])**2+l**2-o41m**2)/(2*abs(a[1])*l))*180.0/pi    
    q3_value = elbow*(180.0 - elbow*phi - beta + elbow*90.0)
            
# INVERSE ORIENTATION #
                
    R6B = A6B[0:3,0:3]
    
    A3W_hou = WRIST1.worldTransform().transposed().asTupleOfTuples()
    A3W = np.asarray(A3W_hou)
    A3W[np.absolute(A3W)<=0.0001]=0
    
    A3B = np.dot(np.linalg.inv(ABW),A3W)
    A36 = np.dot(np.linalg.inv(A3B),A6B)
    
#    A36 = np.dot(np.linalg.inv(A3W),A6W)
    
    o36 = A36[0:3,3]
#    
#    R36 = A36[0:3,0:3]
#    R36[np.absolute(R36)<=0.001]=0
#    
#    A2W_hou = IN_LINE_WRIST.worldTransform().transposed().asTupleOfTuples()
#    A2W = np.asarray(A2W_hou)
#    A2W[np.absolute(A2W)<=0.0001]=0
#    
#    A32 = np.dot(np.linalg.inv(A2W),A3W)

    R1 = np.dot(np.dot(rot(q1_value*pi/180.0,'z'),rot(alpha[0],'y')),rot(-alpha[0],'x'))
    R2 = np.dot(rot(q2_value*pi/180.0,'z'),rot(alpha[1],'x'))    
    R3 = np.dot(rot(q3_value*pi/180.0,'z'),rot(alpha[2],'x'))
    
    R3B = np.dot(np.dot(R1,R2),R3)    
    R36 = np.dot(np.transpose(R3B),R6B)
                   
#    # joint №4 #
#    q4_value = -np.arctan2(A32[2,0],A32[0,0])*180.0/pi
    
    # joint №5 #       
    q5_value = np.sign(o36[0])*np.arccos(-R36[2,2])*180.0/pi
    
    # joint №6 #
    if ((q5_value >= 0.0) and (q5_value < 180.0)):
        q6_value = np.arctan2(R36[2,1],R36[2,0])*180.0/pi
        q4_value = np.arctan2(R36[1,2],R36[0,2])*180.0/pi
    else:
        q6_value = np.arctan2(-R36[2,1],-R36[2,0])*180.0/pi
        q4_value = np.arctan2(-R36[1,2],-R36[0,2])*180.0/pi
           
    q1.set(q1_value)
    q2.set(q2_value)
    q3.set(q3_value)
    q4.set(q4_value)
    q5.set(q5_value)
    q6.set(q6_value)


    
 